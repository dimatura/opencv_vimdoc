*cv-flann.txt*	For Vim 0.0	Thu May 19 18:07:34 2011

Navigation

  • index
  • next |
  • previous |
  • opencv v2.1 documentation »
  • flann. Clustering and Search in Multi-Dimensional Spaces »

Fast Approximate Nearest Neighbor Search~

This section documents OpenCV’s interface to the FLANN library. FLANN (Fast
Library for Approximate Nearest Neighbors) is a library that contains a
collection of algorithms optimized for fast nearest neighbor search in large
datasets and for high dimensional features. More information about FLANN can be
found in muja_flann_2009 .

===========================================================================
*cv-flann::Index_*

===========================================================================


The FLANN nearest neighbor index class. This class is templated with the type
of elements for which the index is built.

namespace cv
{
namespace flann
{
    template <typename T>
    class Index_
    {
    public:
            Index_(const Mat& features, const IndexParams& params);

            ~Index_();

            void knnSearch(const vector<T>& query,
                           vector<int>& indices,
                           vector<float>& dists,
                           int knn,
                           const SearchParams& params);
            void knnSearch(const Mat& queries,
                           Mat& indices,
                           Mat& dists,
                           int knn,
                           const SearchParams& params);

            int radiusSearch(const vector<T>& query,
                             vector<int>& indices,
                             vector<float>& dists,
                             float radius,
                             const SearchParams& params);
            int radiusSearch(const Mat& query,
                             Mat& indices,
                             Mat& dists,
                             float radius,
                             const SearchParams& params);

            void save(std::string filename);

            int veclen() const;

            int size() const;

            const IndexParams* getIndexParameters();
    };

    typedef Index_<float> Index;

} } // namespace cv::flann

cv::cv::flann::Index_<T>::Index_~

Index_<T>::Index_(const Mat& features, const IndexParams& params)~

    Constructs a nearest neighbor search index for a given dataset.

                  • features – Matrix of containing the features(points) to
                    index. The size of the matrix is num _ features x feature _
                    dimensionality and the data type of the elements in the
                    matrix must coincide with the type of the index.
                  • params –

                    Structure containing the index parameters. The type of
                    index that will be constructed depends on the type of this
                    parameter. The possible parameter types are:

                      □ LinearIndexParams When passing an object of this type,
                        the index will perform a linear, brute-force search.

                    struct LinearIndexParams : public IndexParams
                    {
                    };

                      □ KDTreeIndexParams When passing an object of this type
                        the index constructed will consist of a set of
                        randomized kd-trees which will be searched in parallel.

                    struct KDTreeIndexParams : public IndexParams
                    {
                        KDTreeIndexParams( int trees = 4 );
                    };

                          ☆ trees The number of parallel kd-trees to use. Good
                            values are in the range [1..16]

                      □ KMeansIndexParams When passing an object of this type
                        the index constructed will be a hierarchical k-means
                        tree.

                    struct KMeansIndexParams : public IndexParams
                    {
                        KMeansIndexParams(
                            int branching = 32,
                            int iterations = 11,
                            flann_centers_init_t centers_init = CENTERS_RANDOM,
                            float cb_index = 0.2 );
                    };

                          ☆ branching The branching factor to use for the
                            hierarchical k-means tree
                          ☆ iterations The maximum number of iterations to use
                            in the k-means clustering stage when building the
                            k-means tree. A value of -1 used here means that
                            the k-means clustering should be iterated until
                            convergence
                          ☆ centers_init The algorithm to use for selecting the
                            initial centers when performing a k-means
                            clustering step. The possible values are
                            CENTERS_RANDOM (picks the initial cluster centers
                            randomly), CENTERS_GONZALES (picks the initial
                            centers using Gonzales’ algorithm) and
                            CENTERS_KMEANSPP (picks the initial centers using
                            the algorithm suggested in arthur_kmeanspp_2007 )
                          ☆ cb_index This parameter (cluster boundary index)
                            influences the way exploration is performed in the
                            hierarchical kmeans tree. When cb_index is zero the
                            next kmeans domain to be explored is choosen to be
                            the one with the closest center. A value greater
                            then zero also takes into account the size of the
                            domain.

                      □ CompositeIndexParams When using a parameters object of
    Parameters:         this type the index created combines the randomized
                        kd-trees and the hierarchical k-means tree.

                    struct CompositeIndexParams : public IndexParams
                    {
                        CompositeIndexParams(
                            int trees = 4,
                            int branching = 32,
                            int iterations = 11,
                            flann_centers_init_t centers_init = CENTERS_RANDOM,
                            float cb_index = 0.2 );
                    };

                      □ AutotunedIndexParams When passing an object of this
                        type the index created is automatically tuned to offer
                        the best performance, by choosing the optimal index
                        type (randomized kd-trees, hierarchical kmeans, linear)
                        and parameters for the dataset provided.

                    struct AutotunedIndexParams : public IndexParams
                    {
                        AutotunedIndexParams(
                            float target_precision = 0.9,
                            float build_weight = 0.01,
                            float memory_weight = 0,
                            float sample_fraction = 0.1 );
                    };

                          ☆ target_precision Is a number between 0 and 1
                            specifying the percentage of the approximate
                            nearest-neighbor searches that return the exact
                            nearest-neighbor. Using a higher value for this
                            parameter gives more accurate results, but the
                            search takes longer. The optimum value usually
                            depends on the application.
                          ☆ build_weight Specifies the importance of the index
                            build time raported to the nearest-neighbor search
                            time. In some applications it’s acceptable for the
                            index build step to take a long time if the
                            subsequent searches in the index can be performed
                            very fast. In other applications it’s required that
                            the index be build as fast as possible even if that
                            leads to slightly longer search times.
                          ☆ memory_weight Is used to specify the tradeoff
                            between time (index build time and search time) and
                            memory used by the index. A value less than 1 gives
                            more importance to the time spent and a value
                            greater than 1 gives more importance to the memory
                            usage.
                          ☆ sample_fraction Is a number between 0 and 1
                            indicating what fraction of the dataset to use in
                            the automatic parameter configuration algorithm.
                            Running the algorithm on the full dataset gives the
                            most accurate results, but for very large datasets
                            can take longer than desired. In such case using
                            just a fraction of the data helps speeding up this
                            algorithm while still giving good approximations of
                            the optimum parameters.

                      □ SavedIndexParams This object type is used for loading a
                        previously saved index from the disk.

                    struct SavedIndexParams : public IndexParams
                    {
                        SavedIndexParams( std::string filename );
                    };

                          ☆ filename The filename in which the index was saved.

cv::cv::flann::Index_<T>::knnSearch~

void Index_<T>::knnSearch(const vector<T>& query, vector<int>& indices, vector
    <float>& dists, int knn, const SearchParams& params)~

void Index_<T>::knnSearch(const Mat& queries, Mat& indices, Mat& dists, int knn
    , const SearchParams& params)

    Performs a K-nearest neighbor search for a given query point using the
    index.

                  • query – The query point
                  • indices – Vector that will contain the indices of the
                    K-nearest neighbors found. It must have at least knn size.
    Parameters:   • dists – Vector that will contain the distances to the
                    K-nearest neighbors found. It must have at least knn size.
                  • knn – Number of nearest neighbors to search for.
                  • params – Search parameters

    struct SearchParams {
            SearchParams(int checks = 32);
    };

          ☆ checks The number of times the tree(s) in the index should be
            recursively traversed. A higher value for this parameter would give
            better search precision, but also take more time. If automatic
            configuration was used when the index was created, the number of
            checks required to achieve the specified precision was also
            computed, in which case this parameter is ignored.

cv::cv::flann::Index_<T>::radiusSearch~

int Index_<T>::radiusSearch(const vector<T>& query, vector<int>& indices,
    vector<float>& dists, float radius, const SearchParams& params)~

int Index_<T>::radiusSearch(const Mat& query, Mat& indices, Mat& dists, float
    radius, const SearchParams& params)

    Performs a radius nearest neighbor search for a given query point.

                  • query – The query point
                  • indices – Vector that will contain the indices of the
                    points found within the search radius in decreasing order
                    of the distance to the query point. If the number of
                    neighbors in the search radius is bigger than the size of
    Parameters:     this vector, the ones that don’t fit in the vector are
                    ignored.
                  • dists – Vector that will contain the distances to the
                    points found within the search radius
                  • radius – The search radius
                  • params – Search parameters

cv::cv::flann::Index_<T>::save~

void Index_<T>::save(std::string filename)~

    Saves the index to a file.

    Parameter: filename – The file to save the index to

cv::cv::flann::Index_<T>::getIndexParameters~

const IndexParams* Index_<T>::getIndexParameters()¶
    Returns the index paramreters. This is usefull in case of autotuned
    indices, when the parameters computed can be retrived using this method.

Help and Feedback

You did not find what you were looking for?

  • Try the Cheatsheet.
  • Ask a question in the user group/mailing list.
  • If you think something is missing or wrong in the documentation, please
    file a bug report.

Logo

Table Of Contents

  • Fast Approximate Nearest Neighbor Search
      □ cv::flann::Index_
      □ cv::cv::flann::Index_<T>::Index_
      □ cv::cv::flann::Index_<T>::knnSearch
      □ cv::cv::flann::Index_<T>::radiusSearch
      □ cv::cv::flann::Index_<T>::save
      □ cv::cv::flann::Index_<T>::getIndexParameters

Previous topic

flann. Clustering and Search in Multi-Dimensional Spaces

Next topic

Clustering

This Page

  • Show Source

Quick search

[                  ] [Go] 
Enter search terms or a module, class or function name.

Navigation

  • index
  • next |
  • previous |
  • opencv v2.1 documentation »
  • flann. Clustering and Search in Multi-Dimensional Spaces »

© Copyright 2010, authors. Created using Sphinx 0.6.2.
Navigation

  • index
  • next |
  • previous |
  • opencv v2.1 documentation »
  • flann. Clustering and Search in Multi-Dimensional Spaces »

===========================================================================
*cv-Clustering*

cv::cv::flann::hierarchicalClustering<ET,DT>~

int hierarchicalClustering<ET,DT>(const Mat& features, Mat& centers, const
    KMeansIndexParams& params)

    Clusters the given points by constructing a hierarchical k-means tree and
    choosing a cut in the tree that minimizes the cluster’s variance.

                  • features – The points to be clustered. The matrix must have
                    elements of type ET.
                  • centers – The centers of the clusters obtained. The matrix
                    must have type DT. The number of rows in this matrix
                    represents the number of clusters desired, however, because
    Parameters:     of the way the cut in the hierarchical tree is chosen, the
                    number of clusters computed will be the highest number of
                    the form (branching-1)*k+1 that’s lower than the number of
                    clusters desired, where branching is the tree’s branching
                    factor (see description of the KMeansIndexParams).
                  • params – Parameters used in the construction of the
                    hierarchical k-means tree

The function returns the number of clusters computed.

Help and Feedback

You did not find what you were looking for?

  • Try the Cheatsheet.
  • Ask a question in the user group/mailing list.
  • If you think something is missing or wrong in the documentation, please
    file a bug report.

Logo

Table Of Contents

  • Clustering
      □ cv::cv::flann::hierarchicalClustering<ET,DT>

Previous topic

Fast Approximate Nearest Neighbor Search

Next topic

objdetect. Object Detection

This Page

  • Show Source

Quick search

[                  ] [Go] 
Enter search terms or a module, class or function name.

Navigation

  • index
  • next |
  • previous |
  • opencv v2.1 documentation »
  • flann. Clustering and Search in Multi-Dimensional Spaces »

© Copyright 2010, authors. Created using Sphinx 0.6.2.


vim:tw=78:ts=4:ft=help:norl: